{-# LANGUAGE OverloadedStrings, CPP #-}
module Elektra.Typechecker () where

import Elektra.Key
import Elektra.KeySet
import Elektra.KDB
import Elektra.Plugin
import Elektra.SpecTranslator
import Elektra.SpecParser
import Elektra.Errors

import Control.Monad                (mapM_)
import Control.Logger.Simple
import Data.Bool                    (bool)
import Data.List                    (intercalate, isPrefixOf)
import Foreign.Ptr
import System.IO.Temp               (writeTempFile)
import System.Directory             (removeFile)
import System.Environment           (lookupEnv)
import Text.PrettyPrint

import Language.Haskell.Exts.Pretty
import Language.Haskell.Interpreter
import Language.Haskell.Interpreter.Unsafe

import qualified Data.Text as T

data CheckMode = Get | Set

typecheck :: KeySet -> Key -> CheckMode -> IO Bool
typecheck ks k c = withGlobalLogging (LogConfig Nothing ("@ENABLE_LOGGER@" == "ON")) $ do
  name <- keyName k
  logDebugT $ "Parse Specifications at " ++ name

  -- Otherwise ksCut would remove keys, we don't want that behavior here
  ksc <- ksDup ks

  -- load type signatures if available, chances are prelude is mounted as well below the path
  -- and in that case we don't get it passed by the plugin interface
  pp <- keyDup k
  keyAddBaseName pp "elektra"
  keyAddBaseName pp "spec"
  logDebugT $ "Opening prelude at " ++ show pp
  pdc <- kdbOpen pp $ \p -> do
    pd <- ksNew 10
    pp2 <- keyDup pp
    kdbGet p pd pp2
    -- play it safe and copy it here so ksCut won't affect anything else
    ksDup pd

  pdcc <- ksCut pdc pp
  logDebugT $ "Prelude contained " ++ show pdcc
  ksAppend ksc pdcc

  logDebugT $ "Combined specifications are " ++ show ksc

  typeSpecs <- parseTypeSpecifications k ksc
  logDebugT $ "Got " ++ show (length typeSpecs) ++ " function specifications"
  mapM_ (logDebugT . show) typeSpecs

  keySpecs <- parseKeySpecifications k ksc
  logDebugT $ "Got " ++ show (length keySpecs) ++ " key specifications"
  mapM_ (logDebugT . show) keySpecs

  putStepLn "Done Parsing all Specifications, now translate them."
  let rendered = renderStyle style {lineLength = 320} $ prettyPrim $ translateSpecifications typeSpecs keySpecs
  logDebugT rendered

  putStepLn "Done Translating all Specifications."
  specFile <- writeTempFile "/tmp/" "testSpecification.hs" rendered

  -- So we can override it for the build tests
  pdb <- lookupEnv "SANDBOX_PACKAGEDB"
  let args = filter (not . null) ["-package-db=" ++ maybe "@TYPECHECKER_GHC_PLUGIN@" id pdb, "-fplugin=Elektra.RegexTypeChecker", "-v"]
  r <- unsafeRunInterpreterWithArgs args (keyInterpreter specFile)
  removeFile specFile
  case r of
    Left err -> do
      let errStr = errorString err
      case c of
        Set -> triggerError 193 k errStr
        Get -> triggerWarnings 192 k errStr
      logDebugT errStr
      return True
    Right () -> return False
  where
    putStepLn s = logDebugT $ "\n" ++ s ++ "\n"

keyInterpreter :: FilePath -> InterpreterT IO ()
keyInterpreter specFile = do
  loadModules [specFile]
  say "Loaded our rendered specification, now we can infer the stuff in it."
  setTopLevelModules ["TestSpecification"]
  getModuleExports "TestSpecification" >>= mapM_ showTypes . filter isFun . filter (not . isPrefixOf "specElektraRawKey" . name)
  where
    showTypes c = typeOf (name c) >>= say . ((name c ++ " has an infered type of ") ++)
    isFun (Fun _) = True
    isFun _ = False

errorString :: InterpreterError -> String
errorString (WontCompile es) = intercalate "\n" (header : map unbox es)
  where
    header = "ERROR: Won't compile:"
    unbox (GhcError e) = e
errorString e = show e

isCheckingPrelude :: Key -> IO Bool
isCheckingPrelude k = do
  bn1 <- keyBaseName k
  keyDeleteBaseName k
  bn2 <- keyBaseName k
  return $ bn1 == "spec" && bn2 == "elektra"

say :: String -> Interpreter ()
say = liftIO . logDebugT

logDebugT :: MonadIO m => String -> m ()
logDebugT = logDebug . T.pack

elektraTypecheckerOpen :: Plugin -> Key -> IO PluginStatus
elektraTypecheckerOpen _ _ = return Success
hs_elektraHaskellOpen = elektraPluginOpenWith elektraTypecheckerOpen

elektraTypecheckerClose :: Plugin -> Key -> IO PluginStatus
elektraTypecheckerClose _ _ = return Success
hs_elektraHaskellClose = elektraPluginCloseWith elektraTypecheckerClose

elektraTypecheckerGet :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerGet _ ks k = isCheckingPrelude k >>= bool (typecheck ks k Get >> return NoUpdate) (return NoUpdate)
hs_elektraHaskellGet = elektraPluginGetWith elektraTypecheckerGet

elektraTypecheckerSet :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerSet _ ks k = isCheckingPrelude k >>= bool (bool NoUpdate Error <$> typecheck ks k Set) (return NoUpdate)
hs_elektraHaskellSet = elektraPluginSetWith elektraTypecheckerSet

elektraTypecheckerError :: Plugin -> KeySet -> Key -> IO PluginStatus
elektraTypecheckerError _ _ _ = return Success
hs_elektraHaskellError = elektraPluginErrorWith elektraTypecheckerError

foreign export ccall hs_elektraHaskellOpen :: Ptr Plugin -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellClose :: Ptr Plugin -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellGet :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellSet :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
foreign export ccall hs_elektraHaskellError :: Ptr Plugin -> Ptr KeySet -> Ptr Key -> IO Int
